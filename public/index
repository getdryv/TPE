<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Paiement avec TPE GETdryv</title>
  <script src="https://js.stripe.com/terminal/v1/"></script>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
  <style>
    body {
      font-family: 'Montserrat', sans-serif;
      background-color: #f6f9fc;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }
    .container {
      background: #fff;
      border-radius: 12px;
      padding: 30px;
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
      max-width: 400px;
      width: 100%;
      text-align: center;
    }
    h2 {
      color: #635bff;
      margin-bottom: 20px;
    }
    input {
      font-family: inherit;
      width: 100%;
      padding: 12px;
      margin-top: 10px;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 16px;
      background-color: #edf2ff;
    }
    button {
      font-family: inherit;
      padding: 12px;
      margin-top: 15px;
      border-radius: 6px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: 0.2s ease;
    }
    .main-btn {
      background-color: #635bff;
      color: white;
      border: none;
      width: 100%;
    }
    .secondary-btn {
      background-color: white;
      color: #635bff;
      border: 2px solid #635bff;
      width: 100%;
      margin-top: 10px;
    }
    #result {
      margin-top: 15px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>Paiement avec TPE <strong>GETdryv</strong></h2>
    <form id="payment-form">
      <input type="text" name="firstName" placeholder="Pr√©nom" required />
      <input type="text" name="lastName" placeholder="Nom" required />
      <input type="email" name="email" placeholder="Email" required />
      <input type="number" name="montant" placeholder="Montant (‚Ç¨)" step="0.01" min="0.01" required />

      <button type="submit" class="main-btn">Envoyer au TPE</button>
    </form>
    <button onclick="window.location.reload()" class="secondary-btn">Nouvelle transaction</button>
    <div id="result"></div>
  </div>

  <script>
    const form = document.getElementById("payment-form");
    const result = document.getElementById("result");

    let terminal;
    let cancelCollect = null;

    async function initializeTerminal() {
      terminal = StripeTerminal.create({
        onFetchConnectionToken: async () => {
          const res = await fetch("/connection-token", { method: "POST" });
          const data = await res.json();
          return data.secret;
        },
        onUnexpectedReaderDisconnect: () => {
          result.innerHTML = "‚ùå Lecteur d√©connect√©.";
        }
      });

      const discovery = await terminal.discoverReaders({ simulated: false });
      if (discovery.error) {
        result.innerHTML = "‚ùå Erreur lecteur : " + discovery.error.message;
        return;
      }

      if (discovery.discoveredReaders.length === 0) {
        result.innerHTML = "‚ùå Aucun lecteur trouv√©.";
        return;
      }

      const connect = await terminal.connectReader(discovery.discoveredReaders[0]);
      if (connect.error) {
        result.innerHTML = "‚ùå Erreur connexion : " + connect.error.message;
      } else {
        result.innerHTML = "‚úÖ Lecteur connect√© : <strong>" + connect.reader.label + "</strong>";
      }
    }

    initializeTerminal();

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      result.innerHTML = "‚è≥ Envoi du paiement...";

      const formData = Object.fromEntries(new FormData(form).entries());
      const montant = parseFloat(formData.montant);
      if (isNaN(montant) || montant <= 0) {
        result.innerHTML = "‚ùå Montant invalide.";
        return;
      }

      const montantCentimes = Math.round(montant * 100);

      const response = await fetch("/create-payment-intent", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          montant: montantCentimes,
          email: formData.email,
          firstName: formData.firstName,
          lastName: formData.lastName
        })
      });

      const { client_secret } = await response.json();

      const collect = await terminal.collectPaymentMethod(client_secret);
      cancelCollect = collect.cancel;

      if (collect.error) {
        result.innerHTML = "‚ùå Erreur lecture carte : " + collect.error.message;
        return;
      }

      const confirm = await terminal.processPayment(collect.paymentIntent);
      if (confirm.error) {
        result.innerHTML = "‚ùå Erreur confirmation : " + confirm.error.message;
        return;
      }

      const capture = await fetch("/capture-payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ paymentIntentId: confirm.paymentIntent.id })
      });

      const captureResult = await capture.json();
      if (captureResult.error) {
        result.innerHTML = "‚ùå Erreur capture : " + captureResult.error;
      } else {
        result.innerHTML = "üéâ Paiement r√©ussi !";
        confetti();
      }
    });
  </script>
</body>
</html>
